{
  "BuildInfo":{
    "Date":"Sat Oct 15 17:25:14 2022",
    "TypeWriter":{
      "Name":"TypeWriter",
      "Version":"4.7.3",
      "Licence":"MIT"
    }
  },
  "Package":{
    "InfoVersion":1,
    "Description":"OpenIPC-TypeWriter Client",
    "ID":"OpenIPC-TypeWriter",
    "Entrypoints":{
      "Main":"openipc.connector.Test"
    },
    "Name":"OpenIPC-TypeWriter",
    "Version":"1.1.0",
    "Author":{
      "Developers":["CoreByte"],
      "Contributors":[]
    },
    "Contact":{
      "Source":"",
      "Socials":[],
      "Website":""
    },
    "Dependencies":{
      "Luvit":["creationix/coro-spawn","creationix/coro-http","creationix/coro-websocket"],
      "Dua":[],
      "Git":[]
    }
  },
  "Code":{
    "openipc.connector.Classes.IPCConnection":{
      "Code":"local Connection = Import(\"ga.corebyte.BetterEmitter\"):extend()\r\nlocal WebSocket = Import(\"openipc.connector.Helper.WebSocket\")\r\nlocal StartHost = Import(\"openipc.connector.Helper.StartHost\")\r\nlocal Json = require(\"json\")\r\n\r\nfunction Connection:initialize(Channel, Name)\r\n    self.Channel = Channel\r\n    self.Name = Name\r\n    self.Handlers = {}\r\n\r\n    StartHost()\r\n\r\n    local Response, Read, Write = WebSocket(\r\n        string.format(\r\n            \"ws://localhost:25665/v1/connect/%s/%s\",\r\n            Channel,\r\n            Name\r\n        )    \r\n    )\r\n    self.Connection = {\r\n        Read = Read,\r\n        Write = Write\r\n    }\r\n\r\n    coroutine.wrap(function ()\r\n        self:Emit(\"Connected\")\r\n        TypeWriter.Logger.Info(\"OpenIPC > Connected to the host.\")\r\n        for Message in Read do\r\n            local Payload = Message.payload\r\n            local Decoded = Json.decode(Payload)\r\n            coroutine.wrap(function ()\r\n                self:HandleIncoming(Decoded)\r\n            end)()\r\n        end\r\n        self:Emit(\"Disconnected\")\r\n        self:Emit(\"Return\", {IPC_DISCONNECTED = true})\r\n    end)()\r\nend\r\n\r\nfunction Connection:RegisterMessage(Message, Fn)\r\n    self.Handlers[Message] = Fn\r\n    return self\r\nend\r\n\r\nfunction Connection:HandleIncoming(D)\r\n    if D.MessageType == \"Return\" then\r\n        self:Emit(\"Return\", D)\r\n        return\r\n    end\r\n    if self.Handlers[D.Name] == nil then\r\n        TypeWriter.Logger.Info(\"Tried to handle a not existsing message (%s)\", D.Name)\r\n        return\r\n    end\r\n    local ReturnData = self.Handlers[D.Name](D.Data, D.From, D.Sequence)\r\n    self:Write(\r\n        \"Message\",\r\n        {\r\n            To = D.From,\r\n            Sequence = D.Sequence,\r\n            Data = ReturnData,\r\n            MessageType = \"Return\"\r\n        }\r\n    )\r\nend\r\n\r\nfunction Connection:Write(Type, Payload)\r\n    local Data = {\r\n        Type = Type,\r\n        Payload = Payload\r\n    }\r\n    self.Connection.Write(\r\n        {\r\n            payload = Json.encode(Data)\r\n        }\r\n    )\r\nend\r\n\r\nfunction Connection:Send(To, Name, Payload)\r\n    local Sequence = string.random(16)\r\n    self:Write(\r\n        \"Message\",\r\n        {\r\n            To = To,\r\n            Sequence = Sequence,\r\n            Data = Payload,\r\n            Name = Name,\r\n            MessageType = \"Message\"\r\n        }\r\n    )\r\n    local Returned, ReturnedData = self:WaitFor(\"Return\", nil,\r\n        function (Data)\r\n            return Data.Sequence == Sequence or Data.Disconnected == true\r\n        end\r\n    )\r\n    if ReturnedData.IPC_DISCONNECTED == true then\r\n        return {IPC_DISCONNECTED = true, IPC_ERROR = true}\r\n    else\r\n        return ReturnedData.Data\r\n    end\r\nend\r\n\r\nfunction Connection:Disconnect()\r\n    self.Connection.Write()\r\nend\r\n\r\nreturn Connection",
      "Type":"Code"
    },
    "openipc.connector.Helper.StartHost":{
      "Code":"local Request = require(\"coro-http\").request\r\nlocal Spawn = require(\"coro-spawn\")\r\nlocal Json = require(\"json\")\r\nlocal FS = require(\"fs\")\r\n\r\nlocal ApplicationDataFolder = TypeWriter.Folder .. \"/ApplicationData/Open-IPC/\"\r\n\r\nlocal function Check()\r\n    local Success = pcall(Request, \"GET\", \"http://localhost:25665/\")\r\n    return Success\r\nend\r\n\r\nlocal function Start()\r\n    local Result, Error = Spawn(\r\n        TypeWriter.This,\r\n        {\r\n            args = {\r\n                \"execute\",\r\n                \"--input=\" .. ApplicationDataFolder .. \"IPC-Host.twr\",\r\n            },\r\n            detached = true,\r\n            hide = true\r\n        }\r\n    )\r\n    repeat\r\n        Sleep(50)\r\n        TypeWriter.Logger.Warn(\"OpenIPC > Could not connect to the host. Retrying...\")\r\n    until Check()\r\nend\r\n\r\nreturn function ()\r\n    local Running = Check()\r\n    if not Running then\r\n        Start()\r\n        return false\r\n    end\r\n    return true\r\nend",
      "Type":"Code"
    },
    "openipc.connector.Test":{
      "Code":"local Id = tonumber(TypeWriter.ArgumentParser:GetArgument(\"id\", \"id\"))\r\nlocal Connection = Import(\"openipc.connector\"):new(\r\n    \"Test\",\r\n    Id\r\n)\r\nlocal Other = ({[1] = 2, [2] = 1})[Id]\r\n\r\nConnection:RegisterMessage(\r\n    \"Echo\",\r\n    function (Data, From)\r\n        p(\"Echo\", Data, From)\r\n        return Data\r\n    end\r\n)\r\n\r\np(Connection:Send(\r\n    Other,\r\n    \"Echo\",\r\n    {\r\n        Message = \"Hello World\"\r\n    }\r\n))",
      "Type":"Code"
    },
    "openipc.connector.Helper.WebSocket":{
      "Code":"local CoroWebsocket = require(\"coro-websocket\")\r\n\r\nreturn function (Url)\r\n    return CoroWebsocket.connect(CoroWebsocket.parseUrl(Url))\r\nend",
      "Type":"Code"
    },
    "openipc.connector.Main":{
      "Code":"TypeWriter.Runtime.LoadInternal(\"BetterEmitter\")\r\nlocal AppData = TypeWriter.ApplicationData .. \"/Open-IPC/\"\r\nlocal FS = require(\"fs\")\r\nFS.mkdirSync(AppData)\r\nFS.writeFileSync(\r\n    AppData .. \"IPC-Host.twr\",\r\n    TypeWriter.LoadedPackages[\"OpenIPC-TypeWriter\"].Resources[\"/IPC-Host.twr\"]\r\n)\r\nreturn Import(\"openipc.connector.Classes.IPCConnection\")",
      "Type":"Code"
    },
    "openipc.connector":{
      "Type":"Redirect",
      "RedirectTo":"openipc.connector.Main"
    }
  },
  "Resources":{
    "/IPC-Host.twr":"{\n  \"BuildInfo\":{\n    \"Date\":\"Sat Oct 15 17:25:14 2022\",\n    \"TypeWriter\":{\n      \"Licence\":\"MIT\",\n      \"Name\":\"TypeWriter\",\n      \"Version\":\"4.7.3\"\n    }\n  },\n  \"Package\":{\n    \"InfoVersion\":1,\n    \"Description\":\"A IPC-Host\",\n    \"Author\":{\n      \"Contributors\":[],\n      \"Developers\":[\"CoreByte\"]\n    },\n    \"Entrypoints\":{\n      \"Main\":\"openipc.host\"\n    },\n    \"Contact\":{\n      \"Website\":\"\",\n      \"Source\":\"\",\n      \"Socials\":[]\n    },\n    \"Dependencies\":{\n      \"Git\":[],\n      \"Luvit\":[\"creationix/weblit\"],\n      \"Dua\":[]\n    },\n    \"ID\":\"IPC-Host\",\n    \"Name\":\"IPC-Host\",\n    \"Version\":\"1.0.0\"\n  },\n  \"Code\":{\n    \"openipc.host.Server\":{\n      \"Code\":\"return function (Port, Host)\\r\\n    if Host == nil then\\r\\n        Host = \\\"127.0.0.1\\\"\\r\\n    end\\r\\n    require(\\\"weblit-websocket\\\")\\r\\n    local App = require(\\\"weblit\\\").app\\r\\n    local Proxy = Import(\\\"openipc.host.Proxy\\\"):new()\\r\\n\\r\\n    App.bind(\\r\\n        {\\r\\n            host = Host,\\r\\n            port = Port\\r\\n        }\\r\\n    )\\r\\n    \\r\\n    App.use(require('weblit-auto-headers'))\\r\\n    App.route(\\r\\n        {\\r\\n            method = \\\"GET\\\",\\r\\n            path = \\\"/\\\",\\r\\n        },\\r\\n        function (Request, Response)\\r\\n            Response.body = \\\"Running version \\\" .. TypeWriter.LoadedPackages[\\\"IPC-Host\\\"].Package.Version\\r\\n            Response.code = 200\\r\\n        end\\r\\n    )\\r\\n\\r\\n    App.websocket(\\r\\n        {\\r\\n            path = \\\"/v1/connect/:Channel/:Name\\\"\\r\\n        },\\r\\n        function (Request, Read, Write)\\r\\n            Proxy:NewConnection(Request, Read, Write)\\r\\n        end\\r\\n    )\\r\\n    \\r\\n    App.start()\\r\\nend\",\n      \"Type\":\"Code\"\n    },\n    \"openipc.host.Proxy\":{\n      \"Code\":\"local Proxy = Object:extend()\\r\\nlocal Json = require(\\\"json\\\")\\r\\n\\r\\nfunction Proxy:initialize()\\r\\n    self.Connections = {}\\r\\nend\\r\\n\\r\\nfunction Proxy:NewConnection(Request, Read, Write)\\r\\n    local Connections = self.Connections\\r\\n\\r\\n    local Channel = Request.params.Channel\\r\\n    local Name = Request.params.Name\\r\\n\\r\\n    if not Connections[Channel] then\\r\\n        Connections[Channel] = {}\\r\\n    end\\r\\n    Connections[Channel][Name] = {\\r\\n        Read = Read,\\r\\n        Write = Write,\\r\\n        Channel = Channel,\\r\\n        Name = Name\\r\\n    }\\r\\n    TypeWriter.Logger.Info(\\\"New connection using channel %s and id %s\\\", Channel, Name)\\r\\n    local Connection = Connections[Channel][Name]\\r\\n    for Message in Read do\\r\\n        local Payload = Message.payload\\r\\n        local Decoded = Json.decode(Payload)\\r\\n        if Decoded ~= nil then\\r\\n            self:HandleMessage(Connection, Decoded)\\r\\n        end\\r\\n    end\\r\\n    TypeWriter.Logger.Info(\\\"Connection %s from channel %s closed\\\", Name, Channel)\\r\\n    Connections[Channel][Name] = nil\\r\\n    local C = table.count(Connections[Channel])\\r\\n    TypeWriter.Logger.Info(\\\"%s remaining connections on channel %s\\\", C, Channel)\\r\\n    if C == 0 then\\r\\n        TypeWriter.Logger.Info(\\\"Shutting down channel %s\\\", Channel)\\r\\n        Connections[Channel] = nil\\r\\n    end\\r\\nend\\r\\n\\r\\nlocal Handlers = {\\r\\n    [\\\"Message\\\"] = function (self, Connection, Payload)\\r\\n        local Channel = Connection.Channel\\r\\n        local Name = Connection.Name\\r\\n        local To = Payload.To\\r\\n        \\r\\n        Payload.From = Name\\r\\n        Payload.Type = \\\"Message\\\"\\r\\n\\r\\n        if self.Connections[Channel][To] == nil then\\r\\n            TypeWriter.Logger.Info(\\\"Tried to send to a not existsing connection (%s)\\\", To)\\r\\n            Connection.Write(\\r\\n                {\\r\\n                    payload = Json.encode(\\r\\n                        {\\r\\n                            Type = \\\"Message\\\",\\r\\n                            MessageType = \\\"Return\\\",\\r\\n                            From = Name,\\r\\n                            To = Name,\\r\\n                            Sequence = Payload.Sequence,\\r\\n                            Data = {\\r\\n                                IPC_ERROR = true,\\r\\n                                IPC_ERROR_MESSAGE = \\\"The recipient is not connected.\\\",\\r\\n                                IPC_NOT_CONNECTED = true\\r\\n                            }\\r\\n                        }\\r\\n                    )\\r\\n                }\\r\\n            )\\r\\n            return\\r\\n        end\\r\\n        p(Payload)\\r\\n        self.Connections[Channel][To].Write(\\r\\n            {payload = Json.encode(Payload)}\\r\\n        )\\r\\n    end\\r\\n}\\r\\n\\r\\nfunction Proxy:HandleMessage(Connection, Payload)\\r\\n    local Channel = Connection.Channel\\r\\n    local Name = Connection.Name\\r\\n    TypeWriter.Logger.Info(\\\"Message received on channel %s from %s\\\", Channel, Name)\\r\\n    if Handlers[Payload.Type] ~= nil then\\r\\n        Payload.Payload.To = tostring(Payload.Payload.To)\\r\\n        Handlers[Payload.Type](self, Connection, Payload.Payload)\\r\\n    else\\r\\n        TypeWriter.Logger.Error(\\\"Unknown message type %s\\\", Payload.Type)\\r\\n    end\\r\\nend\\r\\n\\r\\n\\r\\n\\r\\nreturn Proxy\",\n      \"Type\":\"Code\"\n    },\n    \"openipc.host.Main\":{\n      \"Code\":\"require(\\\"uv\\\").set_process_title(\\\"TypeWriter - OpenIPC - Host\\\")\\r\\nImport(\\\"openipc.host.Server\\\")(25665)\",\n      \"Type\":\"Code\"\n    },\n    \"openipc.host\":{\n      \"Type\":\"Redirect\",\n      \"RedirectTo\":\"openipc.host.Main\"\n    }\n  },\n  \"Resources\":{\n    \"/package.info.lua\":\"-- See https://github.com/Dot-lua/TypeWriter/wiki/package.info.lua-format for more info\\r\\n\\r\\nreturn { InfoVersion = 1, -- Dont touch this\\r\\n\\r\\n    ID = \\\"IPC-Host\\\", -- A unique id \\r\\n    Name = \\\"IPC-Host\\\",\\r\\n    Description = \\\"A IPC-Host\\\",\\r\\n    Version = \\\"1.0.0\\\",\\r\\n\\r\\n    Author = {\\r\\n        Developers = {\\r\\n            \\\"CoreByte\\\"\\r\\n        },\\r\\n        Contributors = {}\\r\\n    },\\r\\n\\r\\n    Dependencies = {\\r\\n        Luvit = {\\r\\n            \\\"creationix/weblit\\\",\\r\\n        },\\r\\n        Git = {},\\r\\n        Dua = {}\\r\\n    },\\r\\n\\r\\n    Contact = {\\r\\n        Website = \\\"\\\",\\r\\n        Source = \\\"\\\",\\r\\n        Socials = {}\\r\\n    },\\r\\n\\r\\n    Entrypoints = {\\r\\n        Main = \\\"openipc.host\\\"\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\n  }\n}",
    "/package.info.lua":"-- See https://github.com/Dot-lua/TypeWriter/wiki/package.info.lua-format for more info\r\n\r\nreturn { InfoVersion = 1, -- Dont touch this\r\n\r\n    ID = \"OpenIPC-TypeWriter\", -- A unique id \r\n    Name = \"OpenIPC-TypeWriter\",\r\n    Description = \"OpenIPC-TypeWriter Client\",\r\n    Version = \"1.1.0\",\r\n\r\n    Author = {\r\n        Developers = {\r\n            \"CoreByte\"\r\n        },\r\n        Contributors = {}\r\n    },\r\n\r\n    Dependencies = {\r\n        Luvit = {\r\n            \"creationix/coro-spawn\",\r\n            \"creationix/coro-http\",\r\n            \"creationix/coro-websocket\",\r\n        },\r\n        Git = {},\r\n        Dua = {}\r\n    },\r\n\r\n    Contact = {\r\n        Website = \"\",\r\n        Source = \"\",\r\n        Socials = {}\r\n    },\r\n\r\n    Entrypoints = {\r\n        Main = \"openipc.connector.Test\"\r\n    }\r\n\r\n}\r\n"
  }
}