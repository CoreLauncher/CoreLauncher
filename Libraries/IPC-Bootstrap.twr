{
  "BuildInfo":{
    "Date":"Sat Aug  6 21:41:38 2022",
    "TypeWriter":{
      "Name":"TypeWriter",
      "Version":"4.5.8",
      "Licence":"MIT"
    }
  },
  "Package":{
    "InfoVersion":1,
    "Author":{
      "Developers":["CoreByte"],
      "Contributors":[]
    },
    "Description":"A IPC-Bootstrap",
    "ID":"IPC-Bootstrap",
    "Name":"IPC-Bootstrap",
    "Version":"1.0.0",
    "Dependencies":{
      "Git":[],
      "Luvit":["creationix/coro-spawn","creationix/coro-http"],
      "Dua":[]
    },
    "Entrypoints":{
      "Main":"openipc.bootstrap.Test"
    },
    "Contact":{
      "Socials":[],
      "Website":"",
      "Source":""
    }
  },
  "Code":{
    "openipc.bootstrap.Stages.Download":{
      "Code":"local Request = require(\"coro-http\").request\r\nlocal Json = require(\"json\")\r\nlocal FS = require(\"fs\")\r\n\r\nlocal ApplicationDataFolder = TypeWriter.Folder .. \"/ApplicationData/Open-IPC/\"\r\nlocal LatestReleaseURL = \"https://api.github.com/repos/CoreBytee/open-ipc/releases/latest\"\r\nlocal FileUrl = \"https://github.com/CoreBytee/open-ipc/releases/download/%s/%s\"\r\n\r\nlocal function IsConnected()\r\n    local Success = pcall(Request, \"GET\", \"https://github.com/CoreBytee/open-ipc\")\r\n    return Success\r\nend\r\n\r\nlocal function GetLatestTag()\r\n    local Response, Body = Request(\r\n        \"GET\",\r\n        LatestReleaseURL,\r\n        {\r\n            {\"User-Agent\", \"open-ipc (https://github.com/CoreBytee/open-ipc)\"}\r\n        }\r\n    )\r\n    return Json.parse(Body).tag_name\r\nend\r\n\r\nlocal Files = {\r\n    \"IPC-Bootstrap.twr\",\r\n    \"IPC-Connector.twr\",\r\n    \"IPC-Host.twr\"\r\n}\r\n\r\nlocal function DownloadFiles(Tag)\r\n    for Index, FileName in pairs(Files) do\r\n        TypeWriter.Logger.Info(\"OpenIPC > Downloading \" .. FileName .. \"...\")\r\n        local Response, Body = Request(\r\n            \"GET\",\r\n            string.format(\r\n                FileUrl,\r\n                Tag,\r\n                FileName\r\n            ),\r\n            {\r\n                {\"User-Agent\", \"open-ipc (https://github.com/CoreBytee/open-ipc)\"}\r\n            }\r\n        )\r\n        FS.writeFileSync(ApplicationDataFolder .. FileName, Body)\r\n    end\r\nend\r\n\r\nreturn function ()\r\n    local MustFinish = FS.existsSync(ApplicationDataFolder .. \"/Version.txt\") == false\r\n    FS.mkdirSync(ApplicationDataFolder)\r\n    if IsConnected() == false then\r\n        TypeWriter.Logger.Error(\"Not connected to the internet.\")\r\n        if MustFinish == true then\r\n            process:exit(0)\r\n        end\r\n        return false\r\n    end\r\n\r\n    local Tag = GetLatestTag()\r\n\r\n    if MustFinish == true then\r\n        DownloadFiles(Tag)\r\n        FS.writeFileSync(ApplicationDataFolder .. \"/Version.txt\", Tag)\r\n    else\r\n        local CurrentVersion = FS.readFileSync(ApplicationDataFolder .. \"/Version.txt\")\r\n        if CurrentVersion ~= Tag then\r\n            DownloadFiles(Tag)\r\n            FS.writeFileSync(ApplicationDataFolder .. \"/Version.txt\", Tag)\r\n        end\r\n    end\r\n\r\n    return true\r\nend",
      "Type":"Code"
    },
    "openipc.bootstrap.Stages.LoadAll":{
      "Code":"local FS = require(\"fs\")\r\n\r\nlocal ApplicationDataFolder = TypeWriter.Folder .. \"/ApplicationData/Open-IPC/\"\r\n\r\nreturn function (SkipUpdate)\r\n    if SkipUpdate ~= true or FS.existsSync(ApplicationDataFolder .. \"/Version.txt\") == false then\r\n        Import(\"openipc.bootstrap.Stages.Download\")()\r\n    end\r\n    TypeWriter.Runtime.LoadFile(ApplicationDataFolder .. \"/IPC-Connector.twr\")\r\n    return Import(\"openipc.connector\")\r\nend",
      "Type":"Code"
    },
    "openipc.bootstrap.Test":{
      "Code":"local Connection = Import(\"openipc.bootstrap\").LoadAll():new(\r\n    \"Test\",\r\n    \"abc\"\r\n)",
      "Type":"Code"
    },
    "openipc.bootstrap":{
      "RedirectTo":"openipc.bootstrap.Main",
      "Type":"Redirect"
    },
    "openipc.bootstrap.Main":{
      "Code":"return {\r\n    Download = Import(\"openipc.bootstrap.Stages.Download\"),\r\n    LoadAll = Import(\"openipc.bootstrap.Stages.LoadAll\"),\r\n}",
      "Type":"Code"
    }
  },
  "Resources":[]
}