name: Release
on:
  workflow_dispatch:
  push:
    branches:
      - main
jobs: 
  check:
    name: Check existing release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version from package.json
        id: pkg
        run: echo "version=$(bun run --silent 'console.log(require(\"./package.json\").version)')" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check_release
        uses: actions/github-script@v7
        with:
          script: |
            const tag = `v${process.env.VERSION || core.getInput('version') || '${{ steps.pkg.outputs.version }}'}`;
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const exists = releases.data.some(r => r.tag_name === tag);
            core.setOutput('exists', exists);
        env:
          VERSION: ${{ steps.pkg.outputs.version }}

      - name: Exit if release exists
        if: ${{ steps.check_release.outputs.exists == true }}
        run: |
          echo "Release already exists for version ${{ steps.pkg.outputs.version }}. Exiting."
          exit 0
  
  build:
    name: Build binary
    runs-on: ${{ matrix.os }}
    if: ${{ needs.check.outputs.exists == 'false' }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    needs: check
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install bun
        uses: oven-sh/setup-bun@v2
        
      - name: Install dependencies
        run: bun install

      - name: Compile binary
        run: bun run compile-production
          
      - name: Generate hashes
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            bun hash-block ./corelauncher.exe ./corelauncher.hashes
          else
            bun hash-block ./corelauncher ./corelauncher.hashes
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os == 'windows-latest' && 'windows' || 'linux' }}-binary
          path: |
            ${{ matrix.os == 'windows-latest' && 'corelauncher.exe' || 'corelauncher' }}
            corelauncher.hashes

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [check, build]
    if: ${{ needs.check.outputs.exists == 'false' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version from package.json
        id: pkg
        run: echo "version=$(bun run --silent 'console.log(require(\"./package.json\").version)')" >> $GITHUB_OUTPUT

      - name: Download Linux binary
        uses: actions/download-artifact@v3
        with:
          name: linux-binary
          path: ./linux

      - name: Download Windows binary
        uses: actions/download-artifact@v3
        with:
          name: windows-binary
          path: ./windows

      - name: Rename release assets
        run: |
          mv ./linux/corelauncher corelauncher-linux-x64
          mv ./windows/corelauncher.exe corelauncher-windows-x64.exe
          mv ./linux/corelauncher.hashes corelauncher-linux-x64.hashes
          mv ./windows/corelauncher.hashes corelauncher-windows-x64.hashes

      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: v${{ steps.pkg.outputs.version }}
        run: |
            gh release create $TAG \
              ./linux/corelauncher-linux-x64 \
              ./windows/corelauncher-windows-x64.exe \
              ./linux/corelauncher-linux-x64.hashes \
              ./windows/corelauncher-windows-x64.hashes \
              --title "Release $TAG" \
              --generate-notes
              --draft
