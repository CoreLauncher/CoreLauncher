@import url("./Theming.css");
// @import url("./DiscordColors.css");
@import url("../font/index.css");
@import url("./inputs/index.css");
@import url("../../screens/index.css");

* {
    font-family: var(--font-inter);
}

body {
    background-color: var(--background-primary);
}

.floatfix {
    &::after {
        content: " ";
        display: block;
        height: 0;
        clear: both;
    }
}

.userfocus {
    z-index: 99999;
    position: absolute;
    pointer-events: none;

    --addsize: 0px;

    width: calc(var(--parentwidth) + var(--addsize));
    height: calc(var(--parentheight) + var(--addsize));
    top: calc(var(--parenttop) - (var(--addsize) / 2));
    left: calc(var(--parentleft) - (var(--addsize) / 2));
    border-radius: calc(var(--addsize)/8);

    box-shadow: 0px 0px 10px 2px var(--background-color);

    @transitiontime: var(--time);
    @transitionmode: ease-out;
    transition: opacity @transitiontime @transitionmode,
                border-radius @transitiontime @transitionmode,
                width @transitiontime @transitionmode,
                height @transitiontime @transitionmode,
                top @transitiontime @transitionmode,
                left @transitiontime @transitionmode;

    opacity: 1;
    
    .innerfocus {
        position: relative;
        z-index: 999999;

        box-shadow: inset 0px 0px 10px 2px var(--background-color);

        display: block;
        width: 100%;
        height: 100%;

        border-radius: calc(var(--addsize)/16);
        transition: border-radius var(--time) var(--mode);
    }

    &.focus {
        --addsize: var(--focus-size);
        opacity: 0 !important;
    }
}

.linkappearance {
    color: #3838ff;
    text-decoration: underline;
    cursor: pointer;
}

.switchinput {
    @size: 30px;
    @padding: 4px;

    width: @size * 2;
    height: @size;
    border-radius: @size;
    padding: @padding;

    display: inline-block;
    vertical-align: middle;
    position: relative;

    background-color: var(--button-default-hover);
    cursor: pointer;

    &::after {
        content: " ";
        display: block;
        position: absolute;

        top: @padding;
        left: @padding;
        width: @size - (@padding * 2);
        height: @size - (@padding * 2);

        border-radius: @size;
        background-color: var(--block-negative);
        transition: left 0.3s ease-in-out, background-color 0.3s ease-in-out;

        
    }

    &[value="true"] {
        &::after {
            left: @size + @padding;
            background-color: var(--block-positive);
        }
    }

}

.propertiesrow {
    margin-bottom: 10px;
    width: 100%;
}